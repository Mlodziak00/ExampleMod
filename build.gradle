plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

archivesBaseName = project.archives_base_name
version = "${project.version}+${libs.versions.minecraft.get()}"
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/example_mod.accesswidener")
}

repositories {
	maven {
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		url 'https://jitpack.io'
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'dev\\.onyxstudios.*'
		}
	}
	maven {
		url = 'https://maven.shedaniel.me/'
	}
	maven {
		url = 'https://maven.terraformersmc.com/'
	}
	jcenter()
	mavenCentral()
}
dependencies {
	minecraft libs.minecraft
	//mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

	mappings loom.layered {
		addLayer quiltMappings.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2")
	}
	modImplementation libs.quilt.loader


	modImplementation libs.quilted.fabric.api
	modImplementation "io.github.ladysnake:satin:${satin_version}"

	include "io.github.ladysnake:satin:${satin_version}"
	modImplementation "com.github.LudoCrypt.Liminal-Library:limlib_render:${limlib_version}"
	includeMod "com.github.LudoCrypt.Liminal-Library:limlib_effects:${limlib_version}"
	includeMod "com.github.LudoCrypt.Liminal-Library:limlib_registry:${limlib_version}"
	includeMod "com.github.LudoCrypt.Liminal-Library:limlib_render:${limlib_version}"
	includeMod "com.github.LudoCrypt.Liminal-Library:limlib_world:${limlib_version}"

}
def includeMod(var dep) {
	dependencies.modImplementation(dep)
	dependencies.include(dep)
}
processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE') {
		rename { "${it}_${archivesBaseName}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
